#
#       Create an invoice from No Resp Inscr to Consum Final.
#
- Set company as Resp Inscr
- !python {model: res.company}: |
    ids = self.search(cr, uid, [])
    assert(len(ids) == 1)
    partner_id = self.browse(cr, uid, ids)[0].partner_id.id
    self.pool.get('res.partner').write(cr, uid, partner_id, { 'responsability_id': ref('res_IVARNI') })

- Create a simple invoice type B
- !record {model: account.invoice, id: invoice_ar_1}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_zen
    address_invoice_id: base.res_partner_address_zen
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    invoice_line:
      - account_id: account.a_sale
        name: '[PC3] Medium PC'
        price_unit: 900.0
        quantity: 10.0
        product_id: product.product_product_pc3
        uos_id: product.product_uom_unit
        invoice_line_tax_id: !ref {model: account.tax, search: "[('name','=','IVA Ventas 21%')]"}
    journal_id: !ref {model: account.journal, search: "[('name','=','Factura [Venta B] (0001-FVB)')]"}
    partner_id: base.res_partner_3
    reference_type: none        

- Check invoice state and values
- !assert {model: account.invoice, id: invoice_ar_0, string: Check invoice state and values}:
    - state == 'draft'
    - amount_untaxed == 9000.0
    - amount_tax == 0.0
    - amount_total == 9000.0

- Check if exists an invoice
- !python {model: account.invoice}: |
    self.button_compute(cr, uid, [ref('invoice_ar_0')])

- Check invoice state and values
- !assert {model: account.invoice, id: invoice_ar_0, string: Check invoice state and values}:
    - state == 'draft'
    - amount_untaxed == 9000.0
    - amount_tax == 1890.0
    - amount_total == 10890.0

- Check invoice lines
- !assert {model: account.invoice.line, search: "[('invoice_id','=',ref('invoice_ar_0'))]", string: Check invoice lines}:
    - name == '[PC3] Medium PC'
    - price_unit_vat_included == 1089.0
    - price_subtotal_vat_included == 10890.0
    - price_unit_not_vat_included == 900.0
    - price_subtotal_not_vat_included == 9000.0

- Print invoice
- !python {model: account.invoice}: |
    from tools.test_reports import try_report
    try_report(cr, uid, 'report.account.invoice', [ref('invoice_ar_0')])

- Delete invoice to delete journal
- !python {model: account.invoice}: |
    self.unlink(cr, uid, [ref('invoice_ar_0')])


