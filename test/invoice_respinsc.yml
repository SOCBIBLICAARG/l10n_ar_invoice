#
#       Create an invoice from Resp Inscr to Resp Inscr.
#       Total amount > 1000. 
#
- Create a simple invoice type A
- !record {model: account.invoice, id: invoice_ar_0}:
    account_id: account.a_recv
    address_contact_id: base.res_partner_address_zen
    address_invoice_id: base.res_partner_address_zen
    company_id: com_ivari
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    invoice_line:
      - account_id: account.a_sale
        name: '[PC3] Medium PC'
        price_unit: 900.0
        quantity: 10.0
        product_id: product.product_product_pc3
        uos_id: product.product_uom_unit
        invoice_line_tax_id: !ref {model: account.tax, search: "[('name','=','IVA Ventas 21%'),('company_id.name','=','Coop. Trab. Moldeo Interactive Ltda.')]"}
    journal_id: !ref {model: account.journal, search: "[('name','=','Factura [Venta A] (0001-FVA)')]"}
    partner_id: par_ivari
    reference_type: none

- Check invoice state and values
- !assert {model: account.invoice, id: invoice_ar_0, string: Check invoice state and values}:
    - state == 'draft'
    - amount_untaxed == 9000.0
    - amount_tax == 0.0
    - amount_total == 9000.0
    - journal_id.name == 'Factura [Venta A] (0001-FVA)'
    - journal_id.company_id.partner_id.responsability_id.name == 'IVA Responsable Inscripto'
    - company_id.partner_id.responsability_id.name == 'IVA Responsable Inscripto'
    - company_id.name == journal_id.company_id.name

- Compute amount
- !python {model: account.invoice}: |
    self.button_compute(cr, uid, [ref('invoice_ar_0')])

- Check invoice state and values
- !assert {model: account.invoice, id: invoice_ar_0, string: Check invoice state and values}:
    - state == 'draft'
    - amount_untaxed == 9000.0
    - amount_tax == 1890.0
    - amount_total == 10890.0
    - company_id.partner_id.responsability_id.name == 'IVA Responsable Inscripto'
    - journal_id.name == 'Factura [Venta A] (0001-FVA)'

- Check invoice lines
- !assert {model: account.invoice.line, search: "[('invoice_id','=',ref('invoice_ar_0'))]", string: Check invoice lines}:
    - name == '[PC3] Medium PC'
    - price_unit_vat_included == 1089.0
    - price_subtotal_vat_included == 10890.0
    - price_unit_not_vat_included == 900.0
    - price_subtotal_not_vat_included == 9000.0

- Validate invoice
- !python {model: account.invoice}: |
    self.action_date_assign(cr, uid, [ref('invoice_ar_0')])
    self.action_move_create(cr, uid, [ref('invoice_ar_0')])
    self.action_number(cr, uid, [ref('invoice_ar_0')])
    self.write(cr, uid, [ref('invoice_ar_0')], {'state': 'open'})

- Check invoice state and values
- !assert {model: account.invoice, id: invoice_ar_0, string: Check invoice state and values}:
    - state == 'open'
    - amount_untaxed == 9000.0
    - amount_tax == 1890.0
    - amount_total == 10890.0

- Print invoice
- !python {model: account.invoice}: |
    from tools.test_reports import try_report
    try_report(cr, uid, 'report.account.invoice', [ref('invoice_ar_0')])

- Delete invoice to delete journal
- !python {model: account.invoice}: |
    self.action_cancel(cr, uid, [ref('invoice_ar_0')])
    self.write(cr, uid, [ref('invoice_ar_0')], {'state': 'cancel'})
    self.unlink(cr, uid, [ref('invoice_ar_0')])


